// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String
  name              String
  role              String    @default("EMPLOYEE")
  preferredLanguage String    @default("ar")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  sales             Sale[]
  purchases         Purchase[]
  inventoryHistory  InventoryHistory[]
  cashTransactions  CashTransaction[]
}

model Product {
  id           String   @id @default(cuid())
  nameEn       String
  nameAr       String
  sku          String   @unique
  barcode      String?  @unique
  quantity     Int      @default(0)
  minQuantity  Int      @default(5)
  costPrice    Float
  sellingPrice Float
  categoryId   String?
  location     String?
  expiryDate   DateTime?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  category         Category?         @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  saleItems        SaleItem[]
  purchaseItems    PurchaseItem[]
  inventoryHistory InventoryHistory[]
}

model Category {
  id            String    @id @default(cuid())
  nameEn        String    @unique
  nameAr        String    @unique
  descriptionEn String?
  descriptionAr String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  products      Product[]
}

model Customer {
  id        String   @id @default(cuid())
  nameEn    String
  nameAr    String
  phone     String?
  email     String?  @unique
  address   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  sales     Sale[]
}

model Supplier {
  id        String   @id @default(cuid())
  nameEn    String
  nameAr    String
  phone     String?
  email     String?  @unique
  address   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  purchases Purchase[]
}

model Sale {
  id            String     @id @default(cuid())
  invoiceNumber String     @unique
  customerId    String?
  userId        String
  totalAmount   Float
  discount      Float      @default(0)
  tax           Float      @default(0)
  netAmount     Float
  paymentMethod String     @default("CASH") // CASH, CREDIT, CARD
  status        String     @default("COMPLETED") // COMPLETED, PENDING, CANCELLED
  notes         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  // Relations
  customer      Customer?  @relation(fields: [customerId], references: [id], onDelete: SetNull)
  user          User       @relation(fields: [userId], references: [id])
  items         SaleItem[]
  returns       Return[]
}

model SaleItem {
  id        String   @id @default(cuid())
  saleId    String
  productId String
  quantity  Int
  price     Float
  total     Float
  discount  Float    @default(0)
  
  // Relations
  sale      Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
}

model Purchase {
  id            String         @id @default(cuid())
  invoiceNumber String         @unique
  supplierId    String?
  userId        String
  totalAmount   Float
  discount      Float          @default(0)
  tax           Float          @default(0)
  netAmount     Float
  status        String         @default("COMPLETED") // COMPLETED, PENDING, CANCELLED
  notes         String?
  purchaseDate  DateTime       @default(now())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Relations
  supplier      Supplier?      @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  user          User           @relation(fields: [userId], references: [id])
  items         PurchaseItem[]
}

model PurchaseItem {
  id         String   @id @default(cuid())
  purchaseId String
  productId  String
  quantity   Int
  price      Float
  total      Float
  discount   Float    @default(0)
  weight     Float?   // Weight in kilograms for food items
  
  // Relations
  purchase   Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id])
}

model Return {
  id        String   @id @default(cuid())
  saleId    String
  reason    String?
  amount    Float    @default(0)
  quantity  Int      @default(0)
  status    String   @default("PENDING") // PENDING, COMPLETED, CANCELLED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  sale      Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
}

model InventoryHistory {
  id               String   @id @default(cuid())
  productId        String
  userId           String
  action           String   // INITIAL_STOCK, SALE, PURCHASE, ADJUSTMENT, RETURN
  previousQuantity Int
  newQuantity      Int
  quantityChange   Int      // newQuantity - previousQuantity
  reason           String?
  referenceId      String?  // Reference to sale/purchase/etc
  timestamp        DateTime @default(now())
  
  // Relations
  product          Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [userId], references: [id])
}

model CashTransaction {
  id               String   @id @default(cuid())
  type             String   // RECEIPT, PAYMENT, SALARY, EXPENSE, TRANSFER
  amount           Float
  currency         String   @default("IQD")
  exchangeRate     Float    @default(1.0)
  description      String?
  referenceId      String?  // Reference to sale/purchase/etc
  userId           String
  employeeId       String?  // For salary payments
  expenseCategoryId String? // For expense payments
  status           String   @default("COMPLETED") // COMPLETED, PENDING, CANCELLED
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  user            User             @relation(fields: [userId], references: [id])
  employee        Employee?        @relation(fields: [employeeId], references: [id], onDelete: SetNull)
  expenseCategory ExpenseCategory? @relation(fields: [expenseCategoryId], references: [id], onDelete: SetNull)
}

model Agent {
  id         String   @id @default(cuid())
  nameEn     String
  nameAr     String
  phone      String?
  email      String?  @unique
  commission Float    @default(0) // Percentage
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Settings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("STRING") // STRING, NUMBER, BOOLEAN, JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Employee {
  id        String   @id @default(cuid())
  nameEn    String
  nameAr    String
  email     String?  @unique
  phone     String?
  position  String?
  salary    Float?
  hireDate  DateTime @default(now())
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  cashTransactions CashTransaction[]
}

model ExpenseCategory {
  id        String   @id @default(cuid())
  nameEn    String   @unique
  nameAr    String   @unique
  isSystem  Boolean  @default(true) // System categories cannot be modified
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  cashTransactions CashTransaction[]
}

model AccountType {
  id        String   @id @default(cuid())
  nameEn    String   @unique
  nameAr    String   @unique
  code      String   @unique // For accounting codes
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations  
  accounts  Account[]
}

model Account {
  id          String   @id @default(cuid())
  nameEn      String
  nameAr      String
  accountTypeId String
  balance     Float    @default(0)
  currency    String   @default("IQD")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  accountType AccountType @relation(fields: [accountTypeId], references: [id])
}