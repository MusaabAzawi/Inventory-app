generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  password          String
  name              String
  role              String             @default("EMPLOYEE")
  preferredLanguage String             @default("ar")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  cashTransactions  CashTransaction[]
  inventoryHistory  InventoryHistory[]
  purchases         Purchase[]
  sales             Sale[]
}

model Product {
  id               String             @id @default(cuid())
  nameEn           String
  nameAr           String
  sku              String             @unique
  barcode          String?            @unique
  quantity         Int                @default(0)
  minQuantity      Int                @default(5)
  costPrice        Float
  sellingPrice     Float
  categoryId       String?
  location         String?
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  expiryDate       DateTime?
  inventoryHistory InventoryHistory[]
  category         Category?          @relation(fields: [categoryId], references: [id])
  purchaseItems    PurchaseItem[]
  saleItems        SaleItem[]
}

model Category {
  id            String    @id @default(cuid())
  nameEn        String    @unique
  nameAr        String    @unique
  descriptionEn String?
  descriptionAr String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  products      Product[]
}

model Customer {
  id        String   @id @default(cuid())
  nameEn    String
  nameAr    String
  phone     String?
  email     String?  @unique
  address   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sales     Sale[]
}

model Supplier {
  id        String     @id @default(cuid())
  nameEn    String
  nameAr    String
  phone     String?
  email     String?    @unique
  address   String?
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  purchases Purchase[]
}

model Sale {
  id            String     @id @default(cuid())
  invoiceNumber String     @unique
  customerId    String?
  userId        String
  totalAmount   Float
  discount      Float      @default(0)
  tax           Float      @default(0)
  netAmount     Float
  paymentMethod String     @default("CASH")
  status        String     @default("COMPLETED")
  notes         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  returns       Return[]
  customer      Customer?  @relation(fields: [customerId], references: [id])
  user          User       @relation(fields: [userId], references: [id])
  items         SaleItem[]
}

model SaleItem {
  id        String   @id @default(cuid())
  saleId    String
  productId String
  quantity  Int
  price     Float
  total     Float
  discount  Float    @default(0)
  weight    Float?   // Weight in kilograms for food items
  product   Product  @relation(fields: [productId], references: [id])
  sale      Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  returns   Return[]
}

model Purchase {
  id            String         @id @default(cuid())
  invoiceNumber String         @unique
  supplierId    String?
  userId        String
  totalAmount   Float
  discount      Float          @default(0)
  tax           Float          @default(0)
  netAmount     Float
  status        String         @default("COMPLETED")
  notes         String?
  purchaseDate  DateTime       @default(now())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  supplier      Supplier?      @relation(fields: [supplierId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  items         PurchaseItem[]
}

model PurchaseItem {
  id         String   @id @default(cuid())
  purchaseId String
  productId  String
  quantity   Int
  price      Float
  total      Float
  discount   Float    @default(0)
  product    Product  @relation(fields: [productId], references: [id])
  purchase   Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
}

model Return {
  id         String    @id @default(cuid())
  saleId     String
  saleItemId String
  reason     String?
  amount     Float     @default(0)
  quantity   Int       @default(0)
  status     String    @default("PENDING")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  sale       Sale      @relation(fields: [saleId], references: [id], onDelete: Cascade)
  saleItem   SaleItem  @relation(fields: [saleItemId], references: [id], onDelete: Cascade)
}

model InventoryHistory {
  id               String   @id @default(cuid())
  productId        String
  userId           String
  action           String
  previousQuantity Int
  newQuantity      Int
  quantityChange   Int
  reason           String?
  referenceId      String?
  timestamp        DateTime @default(now())
  product          Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [userId], references: [id])
}

model CashTransaction {
  id                String           @id @default(cuid())
  type              String
  amount            Float
  currency          String           @default("IQD")
  exchangeRate      Float            @default(1.0)
  description       String?
  referenceId       String?
  userId            String
  status            String           @default("COMPLETED")
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  employeeId        String?
  expenseCategoryId String?
  employee          Employee?        @relation(fields: [employeeId], references: [id])
  expenseCategory   ExpenseCategory? @relation(fields: [expenseCategoryId], references: [id])
  user              User             @relation(fields: [userId], references: [id])
}

model Agent {
  id         String   @id @default(cuid())
  nameEn     String
  nameAr     String
  phone      String?
  email      String?  @unique
  commission Float    @default(0)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Settings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("STRING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Employee {
  id               String            @id @default(cuid())
  nameEn           String
  nameAr           String
  email            String?           @unique
  phone            String?
  position         String?
  salary           Float?
  hireDate         DateTime          @default(now())
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  cashTransactions CashTransaction[]
}

model ExpenseCategory {
  id               String            @id @default(cuid())
  nameEn           String            @unique
  nameAr           String            @unique
  isSystem         Boolean           @default(true)
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  cashTransactions CashTransaction[]
}

model AccountType {
  id        String    @id @default(cuid())
  nameEn    String    @unique
  nameAr    String    @unique
  code      String    @unique
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
}

model Account {
  id            String      @id @default(cuid())
  nameEn        String
  nameAr        String
  accountTypeId String
  balance       Float       @default(0)
  currency      String      @default("IQD")
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accountType   AccountType @relation(fields: [accountTypeId], references: [id])
}
